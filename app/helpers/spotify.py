from app import traceback, spotipy, SpotifyOAuth


def get_user_playlists():
    sp = spotipy.Spotify(auth_manager=SpotifyOAuth(scope="playlist-read-private,playlist-read-collaborative"))
    playlists, offset = [], 0
    while True:
        response = sp.current_user_playlists(limit=50, offset=offset)
        playlists += [{"name": playlist["name"], "id": playlist["id"]} for playlist in response["items"]]
        if response["next"] is None:
            break
        offset += 50
    return playlists


def get_playlist_by_name(playlist_name):
    sp = spotipy.Spotify(auth_manager=SpotifyOAuth(scope="playlist-read-private,playlist-read-collaborative"))
    results = sp.search(q=playlist_name, type="playlist")
    if not results["playlists"]["items"]:
        return {}
    playlist_id = results["playlists"]["items"][0]["id"]
    playlist = sp.playlist(playlist_id)
    return playlist


def get_playlist_by_id(playlist_id):
    sp = spotipy.Spotify(auth_manager=SpotifyOAuth(scope="playlist-read-private,playlist-read-collaborative"))
    playlist = sp.playlist(playlist_id)
    return playlist


def execute_playlist_code(playlist_id, code, comments=""):
    try:
        sp = spotipy.Spotify(auth_manager=SpotifyOAuth(scope="playlist-read-private,playlist-read-collaborative"))
    except Exception as e:
        return "There was an error connecting to your Spotify account: {}".format(e)
    
    playlist = sp.playlist(playlist_id)
    namespace = {"playlist_id": playlist_id, "playlist": playlist, "sp": sp, "answer": "Your question was unable to be answered."}
    
    try:
        exec(code, namespace)
    except Exception as e:
        traceback.print_exc()
        return "There was an error executing the code generated by GPT: {}\n\n{}".format(e, traceback.format_exc())
    
    if comments:
        answer = f"{namespace['answer']}<br><br><strong>Comments:</strong><br>{comments}"
    else:
        answer = namespace['answer']
    
    print("Answer: " + answer)
    return answer